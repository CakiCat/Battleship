type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult testExample() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("Not an empty game field at the start of the game");
            }

            // Filling the first player field
            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("No offer found to give the move to another player");
            }

            output = main.execute("");

            // Filling the second player field

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                    "coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("H2 H6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H2 H6");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("F3 F6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F6");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("H8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H8 F8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("D4 D6").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D4 D6");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("D8 C8");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D8 C8");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("no offer found to give the move to another player");
            }
            output = main.execute("");

            // Players' moves
            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});

            output = main.execute("I3");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player missed");
            }

            output = main.execute("");
            checkMissing(getFieldMatrix(output), "I3");

            splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields (2 should be)");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});

            output = main.execute("C9");
            if (!output.toLowerCase().contains("hit")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
            }
            main.execute("");

            makeMoveTillTheEnd(main);

            return CheckResult.correct();
        }

        void makeMoveTillTheEnd(TestedProgram main) {

            String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
            String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};

            String[][] matrix;
            String output;
            int i;

            for (i = 0; i < 3; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");

            output = main.execute(secondPlayerMoves[i]);
            if (!output.contains("sank")) {
                throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
            }
            output = main.execute("");

            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkShot(matrix, "A1");
            checkShot(matrix, "B1");
            checkShot(matrix, "C1");
            checkShot(matrix, "D1");

            for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");
            output = main.execute(secondPlayerMoves[i]).toLowerCase();

            if (!output.contains("won") || !output.contains("congratulations")) {
                throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                    "\"You sank the last ship. You won. Congratulations!\"");
            }
        }

        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
            }
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/BattleField.java
  visible: true
  text: |
    package battleship;

    import java.util.Scanner;
    import java.util.stream.IntStream;

    public class BattleField {
        private char[][] board;
        private char[][] fogOfWar;
        private static final char[] symbols = {'~', 'O', 'X', 'M'};
        private int row0, col0, row1, col1;
        private int numberOfSunkShips = 0;
        private boolean sank = true;
        private boolean game = true;

        public BattleField() {
            board = new char[10][10];
            initialize(board);

            fogOfWar = new char[10][10];
            initialize(fogOfWar);
        }

        public void initialize(char[][] board) {
            for (int i = 0; i < 10; i++) {
                for (int j = 0; j < 10; j++) {
                    board[i][j] = symbols[0];
                }
            }
        }

        public int getNumberOfSunkShips() {
            return numberOfSunkShips;
        }

        public void takeAShot() {

            Scanner scanner = new Scanner(System.in);

            printFog();
            System.out.println("\n Take a shot!\n");
            do {
                String coordinate = scanner.next();
                row0 = Character.getNumericValue(coordinate.charAt(0)) - 9;
                col0 = Integer.parseInt(coordinate.substring(1));
                if (row0 > 10 || col0 > 10) {
                    System.out.println("\nError! You entered the wrong coordinates! Try again:\n");
                    continue;
                }

                if (board[row0 - 1][col0 - 1] == symbols[1]) {
                    fogOfWar[row0 - 1][col0 - 1] = symbols[2];
                    board[row0 - 1][col0 - 1] = symbols[2];
                    numberOfSunkShips = setNumberOfSunkShips(board);
                } else {
                    fogOfWar[row0 - 1][col0 - 1] = symbols[3];
                    board[row0 - 1][col0 - 1] = symbols[3];
                    System.out.print("\nYou missed!");
                }

            } while (true);
        }
        private int setNumberOfSunkShips(char[][] foesBoard) {
            int row = row0;
            int col = col0 - 1;
            int i = 1;
            while (i <= 4) {

                if (1 <= row && row <= 10 &&
                        1 <= col && col <= 10 &&
                        (foesBoard[row - 1][col - 1] == symbols[1] ||
                                foesBoard[row - 1][col - 1] == symbols[2] && row < 10 && foesBoard[row][col - 1] == symbols[1] ||
                                foesBoard[row - 1][col - 1] == symbols[2] && col < 10 && foesBoard[row - 1][col] == symbols[1])) {

                    break;
                } else {
                    if (i <= 2) {
                        col += 2;
                    } else {
                        row += 2;
                    }
                    if (i == 2) {
                        row = row0 - 1;
                        col = col0;
                    } else if (i == 4) {
                        numberOfSunkShips++;
                        if (numberOfSunkShips < 5) {
                            System.out.print("\nYou sank a ship! Specify a new target:\n\n");
                            sank = false;
                        }
                    }
                }
                i++;

            }

            return numberOfSunkShips;
        }

        public void playGame() {
            Scanner scanner = new Scanner(System.in);
            System.out.println("\nThe game starts!");

            printFog();
            System.out.println("\nTake a shot!\n");
            int numberOfSunkShips = 0;
            do {
                sank = true;
                String coordinate = scanner.next();
                row0 = Character.getNumericValue(coordinate.charAt(0)) - 9;
                col0 = Integer.parseInt(coordinate.substring(1));
                if (row0 > 10 || col0 > 10) {
                    System.out.println("\nError! You entered the wrong coordinates! Try again:\n");
                    continue;
                }
                if (board[row0 - 1][col0 - 1] == symbols[1]) {
                    fogOfWar[row0 - 1][col0 - 1] = symbols[2];
                    board[row0 - 1][col0 - 1] = symbols[2];
                    printFog();

                    numberOfSunkShips = setNumberOfSunkShips(board);
                    if (numberOfSunkShips == 5){
                        System.out.println("\nYou sank the last ship. You won. Congratulations!");
                        sank = false;
                        game = false;


                    }
                    if (sank) {
                        System.out.println("\nYou hit a ship! Try again:\n");

                    }

                } else if (board[row0 - 1][col0 - 1] == symbols[2]) {
                    fogOfWar[row0 - 1][col0 - 1] = symbols[2];
                    board[row0 - 1][col0 - 1] = symbols[2];
                    printFog();
                } else {
                    fogOfWar[row0 - 1][col0 - 1] = symbols[3];
                    board[row0 - 1][col0 - 1] = symbols[3];
                    printFog();
                    System.out.println("\nYou missed. Try again:\n");
                }
            } while (game);
        }

        public void run() {
            printBoard();

            Scanner scanner = new Scanner(System.in);

            for (Ship ship : Ship.values()) {
                System.out.printf("%nEnter the coordinates of the %s (%d cells):%n%n",
                        ship.getName(), ship.getNumberCells());
                do {
                    String firstCoord = scanner.next();
                    String secondCoord = scanner.next();
                    row0 = Character.getNumericValue(firstCoord.charAt(0)) - 9;
                    col0 = Integer.parseInt(firstCoord.substring(1));
                    row1 = Character.getNumericValue(secondCoord.charAt(0)) - 9;
                    col1 = Integer.parseInt(secondCoord.substring(1));
                    swapVal();

                    if (handleErrors(firstCoord, secondCoord, ship)) continue;
                    if (firstCoord.charAt(0) == secondCoord.charAt(0)) {
                        IntStream.rangeClosed(col0, col1)
                                .forEach(j -> board[row0 - 1][j - 1] = symbols[1]);
                    } else {
                        IntStream.rangeClosed(row0, row1)
                                .forEach(j -> board[j - 1][col0 - 1] = symbols[1]);
                    }
                    break;
                } while (true);
                printBoard();

            }



        }

        private boolean handleErrors(String firstCoord, String secondCoord, Ship ship) {
            if (row0 != row1 && col0 != col1) {
                System.out.printf("%nError! Wrong ship location! Try again:%n%n");
                return true;
            } else if (row0 - 2 >= 0 && board[row0 - 2][col0 - 1] != '~' || (row1 < 10 && board[row1][col1 - 1] != '~')) {
                System.out.printf("%nError! You placed it to close to another one. Try again:%n%n");
                return true;
            } else if ((firstCoord.charAt(0) == secondCoord.charAt(0) && col1 - col0 + 1 != ship.getNumberCells()) ||
                    (firstCoord.charAt(0) != secondCoord.charAt(0) && row1 - row0 + 1 != ship.getNumberCells())) {
                System.out.printf("%nError! Wrong length of the %s! Try again:%n%n", ship.getName());
                return true;
            }
            return false;
        }

        private void swapVal() {
            if (col0 > col1) {
                col0 = col0 + col1;
                col1 = col0 - col1;
                col0 = col0 - col1;
            } else if (row0 > row1) {
                row0 = row0 + row1;
                row1 = row0 - row1;
                row0 = row0 - row1;
            }
        }

        private void printBoard() {
            char ch = 'A';
            System.out.println("\n  1 2 3 4 5 6 7 8 9 10");
            for (int i = 0; i < board.length; i++) {
                System.out.print(ch);
                for (int j = 0; j < board.length; j++) {
                    System.out.print(" " + board[i][j]);
                }
                System.out.println();
                ch++;
            }
        }

        private void printFog() {
            char ch = 'A';
            System.out.println("\n  1 2 3 4 5 6 7 8 9 10");
            for (int i = 0; i < board.length; i++) {
                System.out.print(ch);
                for (int j = 0; j < board.length; j++) {
                    System.out.print(" " + fogOfWar[i][j]);
                }
                System.out.println();
                ch++;
            }
        }
    }
  learner_created: true
- name: src/battleship/Ship.java
  visible: true
  text: |-
    package battleship;

    public enum Ship {
        AIRCRAFT_CARRIER("Aircraft Carrier", 5),
        BATTLESHIP("Battleship", 4),
        SUBMARINE("Submarine", 3),
        CRUISER("Cruiser", 3),
        DESTROYER("Destroyer", 2);

        private final String name;
        private final int numberCells;
        private String[] coordinates;

        Ship(String name, int numberCells) {
            this.name = name;
            this.numberCells = numberCells;
        }

        Ship(String name, int numberCells, String[] coordinates) {
            this(name, numberCells);
            this.coordinates = coordinates;
        }

        public String getName() {
            return name;
        }
        public int getNumberCells() {
            return numberCells;
        }
        public String[] getCoordinates() {
            return coordinates;
        }

        public void setCoordinates(String[] coordinates) {
            this.coordinates = coordinates;
        }


    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/125/stages/667/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 26 Apr 2021 13:13:10 UTC
record: -1
