type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {

        @DynamicTestingMethod
        CheckResult exampleTest() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = validateShots(main, new String[][]{
                {"A1", "x"}, {"A2", "m"}, {"B1", "x"}, {"C1", "x"}, {"D1", "x"}, {"E4", "m"},
                {"B9", "x"}, {"C9", "x"}, {"D9", "x"}, {"E9", "m"}, {"F3", "x"}, {"F4", "x"},
                {"F5", "x"}, {"F6", "x"}, {"F7", "x"}, {"F10", "m"}, {"G8", "m"}, {"G5", "m"},
                {"H2", "m"}, {"I2", "x"}, {"J2", "x"}, {"J6", "m"}, {"J8", "x"}, {"J9", "x"}, {"J10", "x"}
            });

            if (!output.toLowerCase().contains("you sank the last ship")) {
                return CheckResult.wrong("At the end of the game, your program should print a congratulatory message to the winner:" +
                    " You sank the last ship. You won. Congratulations!");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The game didn't stop after all ships were sank.");
            }

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("B5 C5").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B5 C5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("Your program didn't print a massage about game start");
            }

            String[] temp = output.split("starts");
            if (temp.length < 2) {
                return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
            }
            output = temp[1];

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("After the game starts you should print an empty battle field!");
            }

            output = validateShots(main, new String[][]{
                {"A1", "x"}, {"A2", "m"}, {"B1", "x"}, {"C1", "x"}, {"D1", "m"}, {"F5", "m"},
                {"B5", "x"}, {"B4", "m"}, {"C5", "x"}, {"H8", "m"}, {"F8", "x"}, {"G8", "m"},
                {"E8", "x"}, {"D8", "x"}, {"C8", "x"}, {"D8", "x"}, {"I9", "m"}, {"H1", "x"},
                {"I1", "m"}, {"H2", "x"}, {"H3", "x"}, {"E2", "m"}, {"I8", "m"}, {"J7", "x"},
                {"J8", "m"}, {"J6", "x"}, {"J5", "x"}, {"J4", "x"}, {"J3", "x"},
            });

            if (!output.toLowerCase().contains("you sank the last ship")) {
                return CheckResult.wrong("At the end of the game, your program should print a congratulatory message to the winner:" +
                    " You sank the last ship. You won. Congratulations!");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The game didn't stop after all ships were sank.");
            }

            return CheckResult.correct();
        }


        String validateShots(TestedProgram main, String[][] commands) {

            String output = null;

            for (String[] item : commands) {
                output = main.execute(item[0]);
                if (item[1].equals("x")) {
                    if (!checkShot(getFieldMatrix(output), item[0])) {
                        throw new WrongAnswer("Expected hit in " + item[0]);
                    }
                }
                if (item[1].equals("m")) {
                    if (!checkMissing(getFieldMatrix(output), item[0])) {
                        throw new WrongAnswer("Expected miss in " + item[0]);
                    }
                }
            }

            return output;
        }


        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x");
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }
    }
  learner_created: false
- name: src/battleship/BattleField.java
  visible: true
  text: |
    package battleship;

    import java.util.Scanner;
    import java.util.stream.IntStream;

    public class BattleField {
        private char[][] board;
        private char[][] fogOfWar;
        private static final char[] symbols = {'~', 'O', 'X', 'M'};
        private int row0, col0, row1, col1;

        public BattleField() {
            board = new char[10][10];
            initialize(board);

            fogOfWar = new char[10][10];
            initialize(fogOfWar);
        }

        public void initialize(char[][] board) {
            for (int i = 0; i < 10; i++) {
                for (int j = 0; j < 10; j++) {
                    board[i][j] = symbols[0];
                }
            }
        }

        public void takeAShot() {
            Scanner scanner = new Scanner(System.in);
            int i = 0;
            while (i < 1) {
                System.out.println();
                System.out.println("Take a shot!\n");
                String coordinate = scanner.next();
                row0 = Character.getNumericValue(coordinate.charAt(0)) - 9;
                col0 = Integer.parseInt(coordinate.substring(1));
                if (row0 > 10 || col0 > 10) {
                    System.out.println("\nError! You entered the wrong coordinates! Try again:\n");
                    continue;


                }
                if (board[row0 - 1][col0 - 1] == symbols[1]) {
                    fogOfWar[row0 - 1][col0 - 1] = symbols[2];
                    board[row0 - 1][col0 - 1] = symbols[2];
                    printFog();
                    System.out.println();
                    System.out.println("\nYou hit a ship!");
                    printBoard();
                } else {
                    board[row0 - 1][col0 - 1] = symbols[3];
                    fogOfWar[row0 - 1][col0 - 1] = symbols[3];
                    printFog();
                    System.out.println();
                    System.out.println("\nYou missed!");
                    printBoard();
                }
                i++;
            }

        }

        public void run() {
            printBoard();

            Scanner scanner = new Scanner(System.in);

            for (Ship ship : Ship.values()) {
                System.out.printf("%nEnter the coordinates of the %s (%d cells):%n%n",
                        ship.getName(), ship.getNumberCells());
                do {
                    String firstCoord = scanner.next();
                    String secondCoord = scanner.next();
                    row0 = Character.getNumericValue(firstCoord.charAt(0)) - 9;
                    col0 = Integer.parseInt(firstCoord.substring(1));
                    row1 = Character.getNumericValue(secondCoord.charAt(0)) - 9;
                    col1 = Integer.parseInt(secondCoord.substring(1));
                    swapVal();

                    if (handleErrors(firstCoord, secondCoord, ship)) continue;
                    if (firstCoord.charAt(0) == secondCoord.charAt(0)) {
                        IntStream.rangeClosed(col0, col1)
                                .forEach(j -> board[row0 - 1][j - 1] = symbols[1]);
                    } else {
                        IntStream.rangeClosed(row0, row1)
                                .forEach(j -> board[j - 1][col0 - 1] = symbols[1]);
                    }
                    break;
                } while (true);
                printBoard();

            }

            System.out.println("\n The Game starts!");
            printFog();

        }

        private boolean handleErrors(String firstCoord, String secondCoord, Ship ship) {
            if (row0 != row1 && col0 != col1) {
                System.out.printf("%nError! Wrong ship location! Try again:%n%n");
                return true;
            } else if (row0 - 2 >= 0 && board[row0 - 2][col0 - 1] != '~' || (row1 < 10 && board[row1][col1 - 1] != '~')) {
                System.out.printf("%nError! You placed it to close to another one. Try again:%n%n");
                return true;
            } else if ((firstCoord.charAt(0) == secondCoord.charAt(0) && col1 - col0 + 1 != ship.getNumberCells()) ||
                    (firstCoord.charAt(0) != secondCoord.charAt(0) && row1 - row0 + 1 != ship.getNumberCells())) {
                System.out.printf("%nError! Wrong length of the %s! Try again:%n%n", ship.getName());
                return true;
            }
            return false;
        }

        private void swapVal() {
            if (col0 > col1) {
                col0 = col0 + col1;
                col1 = col0 - col1;
                col0 = col0 - col1;
            } else if (row0 > row1) {
                row0 = row0 + row1;
                row1 = row0 - row1;
                row0 = row0 - row1;
            }
        }

        private void printBoard() {
            char ch = 'A';
            System.out.println("\n  1 2 3 4 5 6 7 8 9 10");
            for (int i = 0; i < board.length; i++) {
                System.out.print(ch);
                for (int j = 0; j < board.length; j++) {
                    System.out.print(" " + board[i][j]);
                }
                System.out.println();
                ch++;
            }
        }

        private void printFog() {
            char ch = 'A';
            System.out.println("\n  1 2 3 4 5 6 7 8 9 10");
            for (int i = 0; i < board.length; i++) {
                System.out.print(ch);
                for (int j = 0; j < board.length; j++) {
                    System.out.print(" " + fogOfWar[i][j]);
                }
                System.out.println();
                ch++;
            }
        }
    }
  learner_created: true
- name: src/battleship/Ship.java
  visible: true
  text: |-
    package battleship;

    public enum Ship {
        AIRCRAFT_CARRIER("Aircraft Carrier", 5),
        BATTLESHIP("Battleship", 4),
        SUBMARINE("Submarine", 3),
        CRUISER("Cruiser", 3),
        DESTROYER("Destroyer", 2);

        private final String name;
        private final int numberCells;
        private String[] coordinates;

        Ship(String name, int numberCells) {
            this.name = name;
            this.numberCells = numberCells;
        }

        Ship(String name, int numberCells, String[] coordinates) {
            this(name, numberCells);
            this.coordinates = coordinates;
        }

        public String getName() {
            return name;
        }
        public int getNumberCells() {
            return numberCells;
        }
        public String[] getCoordinates() {
            return coordinates;
        }

        public void setCoordinates(String[] coordinates) {
            this.coordinates = coordinates;
        }


    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/125/stages/666/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 24 Apr 2021 10:16:11 UTC
record: 4
